// FUNCTIONS

// Strip unit from value
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

/// Converts one or more pixel values into matching rem values.
///
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$baseFontSize` variable as the base.
///
/// @returns {List} A list of converted values.
@function unit-calc($values, $base: $globalBaseSize, $unit:1rem) {

  $max: length($values);

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  // @if unit($base) == '%' {
  //   $base: ($base / 100%) * 16px;
  // }
  @if $max == 1 { @return -value-to-rem(nth($values, 1), $base, $unit); }

  $prop-values: ();

  @each $value in $values {

    @if (index((0, 0px), $value) or $value == auto) {
      $prop-values: append($prop-values, $value);
	} @else {
	  $prop-values: append($prop-values, -value-to-rem($value, $base, $unit));
	}
  }
  @return $prop-values;
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function -value-to-rem($value, $base: null, $unit:1rem) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  // Calculate rem if units for $value is not rem
  @if unit($value) != 'rem' {
    $value: strip-unit($value) / strip-unit($base) * $unit;
  }

  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}

// Used for SVG CSS background images
// @param {String} $viewbox - Viewbox Dimensions (space separated)
// @param {String} $path The D value of a <path>
// @param {String} $fillColor - Color of the path
// @param {String} $stroke - Color of the stroke
// @param {String} $strokeWidth - Width of the stroke
// @return {url} - Used for background-image property, or the URL for background
@function svgShape($fillColor, $viewbox, $path, $stroke:'none', $strokeWidth:'0') {
	@return url('data:image/svg+xml;charset=utf-8,'+url-encode('<svg xmlns="http://www.w3.org/2000/svg" viewBox="#{$viewbox}"><path fill="#{$fillColor}" stroke="#{$stroke}" stroke-width="#{$strokeWidth}" d="#{$path}"/></svg>'));
}

/// URL Encode a string
/// @param {String} $string - string to encode
/// @return {String} - Updated string
@function url-encode($string) {

	$string: str-replace($string,' ',"%20");
	$string: str-replace($string,'"',"%22");
	$string: str-replace($string,"'","%27");
	$string: str-replace($string,'<',"%3C");
	$string: str-replace($string,'>',"%3E");
	$string: str-replace($string,'/',"%2F");
	$string: str-replace($string,':',"%3A");
	$string: str-replace($string,'=',"%3D");
	$string: str-replace($string,'#',"%23");
	@return $string;

}

/// Replace `$search` with `$replace` in `$string`
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
	@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
